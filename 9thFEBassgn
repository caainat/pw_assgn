#ans1
class vehicleee:
    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
        self.name_of_vehicle = name_of_vehicle
        self.max_speed = max_speed
        self.average_of_vehicle = average_of_vehicle

car = vehicleee("toyota", 200, 30)        

print(car.name_of_vehicle)
print(car.max_speed)
print(car.average_of_vehicle)



#ans2
class child_vehicleee(vehicleee):
    def seating_capacity(self, capacity):
        self.capacity=capacity

        #ans3
"""
Multiple inheritance is a feature in object-oriented programming where a class can inherit attributes and 
methods from more than one parent class.
It allows a class to combine features from different sources.
"""

class c1:
    def tc1(self):
        return "HEY"
class c2 :
    def tc2(self):
        return "How are you"
class c3(c1,c2):
        pass
obj=c3()
obj.tc1()

obj.tc2()


#ans4
"""
In Python, getter and setter methods are used to control access to an object's attributes. 
They allow you to encapsulate the access and modification of object attributes, providing
an additional layer of abstraction and control over the data.

A getter method is used to retrieve the value of an attribute, and a setter method is used
to set or modify the value of an attribute. 
This helps in enforcing data validation, manipulation, or performing additional actions
whenever an attribute is accessed or modified.
"""


class stu:
    def __init__(self, name, age):
        self._name=name
        self._age=age
    def get_name(self):
        return self._name
    def set_name(self,name):
        if type(name) == str :
            self._name=name
        else:
            raise ValueError("Name must be a string")
student = stu("Alice", 20)
print(student.get_name()) 
print(student.set_name("BOB")) 
print(student.get_name()) 


#ans5
"""
Method overriding in Python allows a subclass to provide its own implementation for a method
inherited from a parent class. 
Method overriding is a concept in object-oriented programming where a subclass provides a specific 
implementation for a method that is already defined in its superclass.
This allows the subclass to customize or extend the behavior of the inherited method.
"""

class Animal:
    def speak(self):
        return "animal speaks"
class Dog(Animal):
    def speak(self):
        return "dog barks"
class Cat(Animal):
    def speak(self):
        return "cat meows"
animal=Animal()
dog=Dog()
cat=Cat()
print(animal.speak())
print(dog.speak())
print(cat.speak())

